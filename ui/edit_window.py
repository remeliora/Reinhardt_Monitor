from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QFormLayout, QGroupBox, QComboBox,
    QLineEdit, QTextEdit, QTableWidget, QTableWidgetItem,
    QHBoxLayout, QPushButton
)


class EditDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏")
        self.setMinimumWidth(500)
        self.setStyleSheet("""
            QDialog {
                background-color: #F5F0FF;
                font-family: Arial;
                font-size: 11pt;
            }
            QGroupBox {
                border: 2px solid #925FE2;
                border-radius: 10px;
                margin-top: 10px;
            }
            QGroupBox:title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
                background-color: #925FE2;
                color: white;
                font-weight: bold;
            }
            QLineEdit, QTextEdit, QComboBox {
                background-color: white;
                border: 2px solid #925FE2;
                border-radius: 5px;
                padding: 4px;
            }
            QTableWidget {
                background-color: white;
                border: 2px solid #925FE2;
                border-radius: 5px;
            }
            QHeaderView::section {
                background-color: #925FE2;
                color: white;
                font-weight: bold;
            }
            QPushButton {
                background-color: #925FE2;
                color: white;
                font-weight: bold;
                border-radius: 5px;
                padding: 6px 12px;
            }
            QPushButton:hover {
                background-color: #7E4ED6;
            }
            QPushButton:disabled {
                background-color: #CCCCCC;
                color: #666666;
            }
        """)

        layout = QVBoxLayout(self)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏
        station_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏")
        form_layout = QFormLayout()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–æ —Ñ–æ—Ä–º—ã
        self.station_selector = QComboBox()
        self.station_selector.addItem("-- –ù–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è --")

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π
        self.existing_stations = [
            "Reinhardt#1 (–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ)",
            "Reinhardt#2 (–ü—Ä–æ–º–∑–æ–Ω–∞)",
            "Reinhardt#3 (–°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å)",
            "Reinhardt#4 (–ú–µ—Ç–µ–æ–ø–ª–æ—â–∞–¥–∫–∞)"
        ]
        self.station_selector.addItems(self.existing_stations)
        self.station_selector.currentIndexChanged.connect(self.on_station_selected)
        form_layout.addRow("–í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏", self.station_selector)

        self.equipment_type = QComboBox()
        self.equipment_type.addItems(["–ú–æ–¥–µ–ª—å DFT 1MV", "–ú–æ–¥–µ–ª—å DFT 5MV"])

        self.station_name = QLineEdit()
        self.location = QLineEdit()
        self.acronym = QLineEdit()
        self.ip_address = QLineEdit()
        self.port = QLineEdit()
        self.description = QTextEdit()

        form_layout.addRow("–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", self.equipment_type)
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏", self.station_name)
        form_layout.addRow("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", self.location)
        form_layout.addRow("–ê–∫—Ä–æ–Ω–∏–º –º–µ—Å—Ç–∞", self.acronym)
        form_layout.addRow("IP –∞–¥—Ä–µ—Å –∫–æ–Ω–≤–µ–∫—Ç–æ—Ä–∞", self.ip_address)
        form_layout.addRow("–ü–æ—Ä—Ç –∫–æ–Ω–≤–µ–∫—Ç–æ—Ä–∞", self.port)
        form_layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ", self.description)

        station_group.setLayout(form_layout)
        layout.addWidget(station_group)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        range_group = QGroupBox("–î–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        range_layout = QVBoxLayout()

        self.range_table = QTableWidget(0, 3)
        self.range_table.setHorizontalHeaderLabels(["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ú–∏–Ω", "–ú–∞–∫—Å"])
        self.range_table.verticalHeader().setVisible(False)
        self.range_table.horizontalHeader().setStretchLastSection(True)
        self.range_table.setEditTriggers(QTableWidget.AllEditTriggers)

        parameters = ["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "–î–∞–≤–ª–µ–Ω–∏–µ", "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "CVF"]
        for param in parameters:
            row = self.range_table.rowCount()
            self.range_table.insertRow(row)
            self.range_table.setItem(row, 0, QTableWidgetItem(param))
            self.range_table.setItem(row, 1, QTableWidgetItem("-50"))
            self.range_table.setItem(row, 2, QTableWidgetItem("50"))

        range_layout.addWidget(self.range_table)
        range_group.setLayout(range_layout)
        layout.addWidget(range_group)

        # –ö–Ω–æ–ø–∫–∏
        btn_box = QHBoxLayout()
        self.btn_delete = QPushButton("–£–¥–∞–ª–∏—Ç—å")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        btn_save = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        btn_close = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        self.btn_delete.clicked.connect(self.delete_station)
        btn_save.clicked.connect(self.save)
        btn_close.clicked.connect(self.close)

        btn_box.addStretch()
        btn_box.addWidget(self.btn_delete)
        btn_box.addWidget(btn_save)
        btn_box.addWidget(btn_close)
        layout.addLayout(btn_box)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
        self.current_station_id = None
        self.on_station_selected(0)  # –í—ã–±–∏—Ä–∞–µ–º "–ù–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def on_station_selected(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if index == 0:  # –í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è
            self.clear_form()
            self.current_station_id = None
            # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å" –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∏ —Å–µ—Ä–æ–π
            self.btn_delete.setEnabled(False)
        else:
            # –ò–Ω–¥–µ–∫—Å —Å—Ç–∞–Ω—Ü–∏–∏ (–¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - ID –∏–∑ –ë–î)
            station_index = index - 1  # -1 —Ç.–∫. –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –Ω–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
            self.load_station_data(station_index)
            self.current_station_id = station_index

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            self.btn_delete.setEnabled(True)

    def clear_form(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
        self.equipment_type.setCurrentIndex(0)
        self.station_name.clear()
        self.location.clear()
        self.acronym.clear()
        self.ip_address.clear()
        self.port.clear()
        self.description.clear()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        parameters = ["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "–î–∞–≤–ª–µ–Ω–∏–µ", "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "CVF"]
        for row in range(self.range_table.rowCount()):
            self.range_table.item(row, 1).setText("-50")
            self.range_table.item(row, 2).setText("50")

    def load_station_data(self, station_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        station_data = {
            "name": self.existing_stations[station_id],
            "equipment": "–ú–æ–¥–µ–ª—å DFT 5MV" if station_id % 2 == 0 else "–ú–æ–¥–µ–ª—å DFT 1MV",
            "location": "–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ" if station_id == 0 else "–ü—Ä–æ–º–∑–æ–Ω–∞" if station_id == 1 else "–°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å" if station_id == 2 else "–ú–µ—Ç–µ–æ–ø–ª–æ—â–∞–¥–∫–∞",
            "acronym": "OF" if station_id == 0 else "PZ" if station_id == 1 else "SK" if station_id == 2 else "MP",
            "ip": f"192.168.1.{10 + station_id}",
            "port": "502",
            "description": "–û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è –æ—Ñ–∏—Å–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è" if station_id == 0 else
            "–°—Ç–∞–Ω—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤ –ø—Ä–æ–º–∑–æ–Ω–µ" if station_id == 1 else
            "–°–∫–ª–∞–¥—Å–∫–∞—è –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è" if station_id == 2 else
            "–ì–ª–∞–≤–Ω–∞—è –º–µ—Ç–µ–æ–ø–ª–æ—â–∞–¥–∫–∞"
        }

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
        self.station_name.setText(station_data["name"])
        self.equipment_type.setCurrentText(station_data["equipment"])
        self.location.setText(station_data["location"])
        self.acronym.setText(station_data["acronym"])
        self.ip_address.setText(station_data["ip"])
        self.port.setText(station_data["port"])
        self.description.setText(station_data["description"])

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        for row in range(self.range_table.rowCount()):
            param = self.range_table.item(row, 0).text()
            min_val = "-40" if "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" in param else "0" if "–í–ª–∞–∂–Ω–æ—Å—Ç—å" in param else "950" if "–î–∞–≤–ª–µ–Ω–∏–µ" in param else "0"
            max_val = "50" if "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" in param else "100" if "–í–ª–∞–∂–Ω–æ—Å—Ç—å" in param else "1050" if "–î–∞–≤–ª–µ–Ω–∏–µ" in param else "100"

            self.range_table.item(row, 1).setText(min_val)
            self.range_table.item(row, 2).setText(max_val)

    def delete_station(self):
        if self.current_station_id is not None:
            print(f"üóëÔ∏è –°—Ç–∞–Ω—Ü–∏—è {self.existing_stations[self.current_station_id]} —É–¥–∞–ª–µ–Ω–∞")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –ë–î
        else:
            print("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å - —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        self.accept()

    def save(self):
        if self.station_selector.currentIndex() == 0:
            print("üíæ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è:")
        else:
            print(f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏ {self.existing_stations[self.current_station_id]} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")

        # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
        print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {self.station_name.text()}")
        print(f"  –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {self.equipment_type.currentText()}")
        print(f"  IP: {self.ip_address.text()}:{self.port.text()}")

        # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        for row in range(self.range_table.rowCount()):
            param = self.range_table.item(row, 0).text()
            min_val = self.range_table.item(row, 1).text()
            max_val = self.range_table.item(row, 2).text()
            print(f"  {param}: –æ—Ç {min_val} –¥–æ {max_val}")

        self.close()